import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  SafeAreaView,
  Alert,
  Share,
} from 'react-native';
import { StatusBar } from '../../components/StatusBar';
import { ProfileHeaderWithAPI } from '../../components/ProfileHeader/ProfileHeaderWithAPI';
import { ProfileTabs, ProfileTabType } from '../../components/ProfileTabs';
import { BottomNavigation, BottomTabType } from '../../components/BottomNavigation';
import {
  PostsTab,
  ActivityTab,
  SavedTab,
  AffiliateTab,
} from '../../components/ProfileContent';
import { AboutTabWithAPI } from '../../components/ProfileContent/AboutTabWithAPI';
import { COLORS } from '../../constants/colors';
import { useUserProfile } from '../../hooks/useUserProfile';
import {
  mockPosts,
  mockActivities,
  mockSavedItems,
  mockAffiliateCompanies,
} from '../../data/mockProfileData';

interface ProfileScreenWithAPIProps {
  navigation?: any;
}

export const ProfileScreenWithAPI: React.FC<ProfileScreenWithAPIProps> = ({ navigation }) => {
  const [activeTab, setActiveTab] = useState<ProfileTabType>('about'); // Start with about tab to show profile info
  const [activeBottomTab, setActiveBottomTab] = useState<BottomTabType>('profile');
  
  const {
    user,
    loading,
    error,
    refreshProfile,
    updateProfile,
    uploadAvatar,
    deleteAvatar,
  } = useUserProfile();

  const handleEditProfile = () => {
    // Switch to about tab for editing
    if (activeTab !== 'about') {
      setActiveTab('about');
    }
    Alert.alert(
      'Edit Profile',
      'Switch to the About tab to edit your profile information.',
      [{ text: 'OK' }]
    );
  };

  const handleShare = async () => {
    try {
      const shareContent = {
        message: `Check out ${user?.full_name || 'this user'}'s profile on our contractor app!`,
        title: 'Profile Share',
      };
      
      const result = await Share.share(shareContent);
      
      if (result.action === Share.sharedAction) {
        console.log('✅ Profile shared successfully');
      }
    } catch (error) {
      console.error('❌ Share error:', error);
      Alert.alert('Share Error', 'Unable to share profile. Please try again.');
    }
  };

  const handleCreatePost = () => {
    Alert.alert('Create Post', 'Create post functionality would be implemented here');
  };

  const handleContactPress = (type: string, value: string) => {
    switch (type) {
      case 'email':
        Alert.alert('Email', `Send email to: ${value}`, [
          { text: 'Cancel', style: 'cancel' },
          { text: 'Open Email App', onPress: () => console.log('Open email app') },
        ]);
        break;
      case 'phone':
        Alert.alert('Phone', `Call: ${value}`, [
          { text: 'Cancel', style: 'cancel' },
          { text: 'Call', onPress: () => console.log('Make phone call') },
        ]);
        break;
      default:
        Alert.alert(`${type}`, `Value: ${value}`);
    }
  };

  const handleSavedItemPress = (item: any) => {
    Alert.alert('Saved Item', `Opening saved item: ${item.title}`);
  };

  const handleAffiliateJoinNow = () => {
    Alert.alert('Join Affiliate Program', 'Affiliate program registration would be implemented here');
  };

  const handleAffiliateCompanyPress = (company: any) => {
    Alert.alert('Company Details', `Viewing details for ${company.name}`);
  };

  const handleBottomTabPress = (tab: BottomTabType) => {
    setActiveBottomTab(tab);
    // In a real app, this would navigate to different screens
    if (tab !== 'profile') {
      Alert.alert('Navigation', `Navigate to ${tab} screen`);
    }
  };

  const handleRefresh = async () => {
    console.log('🔄 [ProfileScreen] Refreshing profile...');
    await refreshProfile();
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'posts':
        return <PostsTab posts={mockPosts} onCreatePost={handleCreatePost} />;
      case 'activity':
        return <ActivityTab activities={mockActivities} />;
      case 'saved':
        return <SavedTab savedItems={mockSavedItems} onItemPress={handleSavedItemPress} />;
      case 'about':
        return (
          <AboutTabWithAPI
            user={user}
            loading={loading}
            onUpdateProfile={updateProfile}
            onContactPress={handleContactPress}
          />
        );
      case 'affiliate':
        return (
          <AffiliateTab
            companies={mockAffiliateCompanies}
            onJoinNow={handleAffiliateJoinNow}
            onCompanyPress={handleAffiliateCompanyPress}
          />
        );
      default:
        return (
          <AboutTabWithAPI
            user={user}
            loading={loading}
            onUpdateProfile={updateProfile}
            onContactPress={handleContactPress}
          />
        );
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar />
      
      <ProfileHeaderWithAPI
        user={user}
        loading={loading}
        onEditProfile={handleEditProfile}
        onShare={handleShare}
        onUploadAvatar={uploadAvatar}
        onDeleteAvatar={deleteAvatar}
      />
      
      <ProfileTabs
        activeTab={activeTab}
        onTabPress={setActiveTab}
      />
      
      <View style={styles.content}>
        {renderContent()}
      </View>
      
      <BottomNavigation
        activeTab={activeBottomTab}
        onTabPress={handleBottomTabPress}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  content: {
    flex: 1,
  },
});
